services:
  django:
    build: ./backend
    expose:
      - "8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - static_volume:/app/staticfiles
      - logs_volume:/logs
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn shortner.wsgi:application --bind 0.0.0.0:8000
      "

    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health/').getcode()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    build: ./backend
    command: celery -A shortner worker -l INFO
    depends_on:
      django:
        condition: service_healthy

  beat:
    build: ./backend
    command: celery -A shortner beat -l INFO -S django
    depends_on:
      django:
        condition: service_healthy

  database:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    restart: unless-stopped
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
  
  frontend:
    build: ./frontend
    expose:
      - "3000"
    restart: unless-stopped
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  nginx:
    build: ./nginx
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      django:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles:ro  
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/ping/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  
  redis:
    build: ./redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - ./redis:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - backend_network

    

volumes:
  mysql_data:
  static_volume:
  logs_volume:
  redis_data:

networks:
  backend_network:
    driver: bridge  
    
